import json
import math
import sys
from collections import defaultdict, namedtuple
from enum import Enum


EPSILON = 1e-9

# --- 要件定義に従った新しいデータ構造の追加 ---
import math
from enum import Enum



import math
from enum import Enum

# --- データ構造定義 ---

class LineType(Enum):
    MOUNTAIN = "M"
    VALLEY = "V"
    UNASSIGNED = "U"

    @classmethod
    def from_string(cls, s: str):
        """文字列からLineType enumを取得する"""
        if s == "M": return cls.MOUNTAIN
        if s == "V": return cls.VALLEY
        return cls.UNASSIGNED

class AngleGap:
    """角度と折り線タイプを保持するデータクラス"""
    def __init__(self, angle: float, line_type: LineType):
        self.angle = angle
        self.line_type = line_type

    def __repr__(self):
        return f"AngleGap(angle={math.degrees(self.angle):.1f}, type='{self.line_type.value}')"

class Node:
    """リングの各要素を表すノード。安定したIDを持つ。"""
    def __init__(self, value: AngleGap, node_id: int):
        self.value = value
        self.id = node_id
        self.next = None
        self.prev = None

class Ring:
    """連結リストに基づいたリング構造。要素を削除してもIDは不変。"""
    def __init__(self, gaps: list[AngleGap]):
        self.nodes = {}
        if not gaps: return
        node_list = [Node(gap, i) for i, gap in enumerate(gaps)]
        for i, node in enumerate(node_list):
            self.nodes[i] = node
            node.prev = node_list[(i - 1 + len(node_list)) % len(node_list)]
            node.next = node_list[(i + 1) % len(node_list)]

    def __len__(self):
        return len(self.nodes)

    def get_node(self, node_id: int) -> Node | None:
        return self.nodes.get(node_id)

    def drop_connection(self, node_id: int):
        if node_id not in self.nodes: return
        node_to_remove = self.nodes.pop(node_id)
        prev_node, next_node = node_to_remove.prev, node_to_remove.next
        prev_node.next, next_node.prev = next_node, prev_node

    def get_all_nodes(self) -> list[Node]:
        return list(self.nodes.values())

# --- アルゴリズム本体 ---

class VertexFoldabilityChecker:
    """頂点の折りたたみ可能性を検証する最終版クラス"""
    EPSILON = 1e-9

    @staticmethod
    def is_minimal(ring: Ring, node_id: int) -> bool:
        node = ring.get_node(node_id)
        if not node: return False
        is_lefter = node.value.angle < node.prev.value.angle or math.isclose(node.value.angle, node.prev.value.angle, rel_tol=VertexFoldabilityChecker.EPSILON)
        is_righter = node.value.angle < node.next.value.angle or math.isclose(node.value.angle, node.next.value.angle, rel_tol=VertexFoldabilityChecker.EPSILON)
        return is_lefter and is_righter

    @staticmethod
    def check(gaps: list[AngleGap]) -> bool:
        """アルゴリズムの本体。AngleGapのリストを受け取る。"""
        ring = Ring(gaps)
        minimal_indices = {node.id for node in ring.get_all_nodes() if VertexFoldabilityChecker.is_minimal(ring, node.id)}

        while len(ring) > 2:
            if not minimal_indices: return False
            target_id = minimal_indices.pop()
            
            target_node = ring.get_node(target_id)
            if not target_node: continue
            
            prev_node, next_node = target_node.prev, target_node.next
            prev_node.value.angle += next_node.value.angle - target_node.value.angle

            minimal_indices.discard(prev_node.id)
            minimal_indices.discard(next_node.id)

            ring.drop_connection(target_node.id)
            ring.drop_connection(next_node.id)
            
            if len(ring) <= 2: break

            nodes_to_recheck = {prev_node, prev_node.prev, prev_node.next}
            for node in nodes_to_recheck:
                if VertexFoldabilityChecker.is_minimal(ring, node.id):
                    minimal_indices.add(node.id)
                else:
                    minimal_indices.discard(node.id)

        if len(ring) == 2:
            node1, node2 = ring.get_all_nodes()
            return (math.isclose(node1.value.angle, node2.value.angle, rel_tol=VertexFoldabilityChecker.EPSILON) and
                    node1.value.line_type == node2.value.line_type)
        if len(ring) == 0: return True
        return False

    @staticmethod
    def check_from_half_edges(ordered_half_edges, vertex_index):
        """
        HalfEdgeのリストを受け取り、それをAngleGapに変換してチェックを実行するブリッジメソッド。
        """
        # UNASSIGNEDが含まれていれば、編集中のため常にTrueとみなす
        if any(he.assignment == "U" for he in ordered_half_edges):
            return True

        # HalfEdgeからAngleGapのリストへ変換
        gaps = []
        for he in ordered_half_edges:
            angle = he.sector_angle
            line_type = LineType.from_string(he.assignment)
            gaps.append(AngleGap(angle, line_type))
        
        # 変換したデータで、コアとなるチェックメソッドを呼び出す
        return VertexFoldabilityChecker.check(gaps)


# --- 既存のコードとの統合用ラッパー関数（変更不要） ---

def check_folding_simulation_fixed(ordered_half_edges, vertex_index):
    """
    修正版の折りたたみシミュレーション
    要件定義に従った実装を使用
    """
    # VertexFoldabilityCheckerの新しいブリッジメソッドを呼び出す
    is_foldable = VertexFoldabilityChecker.check_from_half_edges(ordered_half_edges, vertex_index)
    
    if not is_foldable:
        return {
            "type": "FoldingSimulation",
            "vertex": vertex_index,
            "message": f"Vertex {vertex_index}: Folding simulation failed. Vertex is not locally flat-foldable.",
            "context": {
                "failure_reason": "NOT_FLAT_FOLDABLE",
                "used_algorithm": "Eric_Demaine_Algorithm"
            }
        }
    
    return None  # 成功

# --- 実行例 ---

# テストのためのダミークラス
class HalfEdge:
    def __init__(self, angle_deg, assignment_str):
        self.sector_angle = math.radians(angle_deg)
        self.assignment = assignment_str

# 問題の「山、山、谷、山」パターンをHalfEdgeで作成
# 順番: E1(M), E2(M), E3(V), E4(M)
# Gapは「直後」の線の種類を持つので、AngleGapのリストは (M, M, V, M) となる
test_half_edges = [
    HalfEdge(90, "M"), # sector E4-E1, line E1 is M
    HalfEdge(90, "M"), # sector E1-E2, line E2 is M
    HalfEdge(90, "V"), # sector E2-E3, line E3 is V
    HalfEdge(90, "M"), # sector E3-E4, line E4 is M
]

# ラッパー関数を実行
error_report = check_folding_simulation_fixed(test_half_edges, vertex_index=4)

if error_report is None:
    print("検証結果: 成功！この頂点は平坦に折りたためます。")
else:
    print(f"検証結果: 失敗...\n{error_report}")
# --- 既存の関数（変更なし） ---

def get_connected_edges_assignments(vertex_index, edges_vertices, edges_assignment):
    """指定された頂点に接続するエッジの種類（山折り、谷折りなど）を取得する"""
    assignments = []
    for i, edge in enumerate(edges_vertices):
        if vertex_index in edge:
            assignments.append(edges_assignment[i])
    return assignments


def get_angles_around_vertex(vertex_index, vertices_coords, edges_vertices):
    """指定された頂点の周りの角度を計算してリストで返す"""
    center_point = vertices_coords[vertex_index]
    
    # 頂点に接続する他の頂点の座標を取得
    connected_points = []
    for edge in edges_vertices:
        if edge[0] == vertex_index:
            connected_points.append(vertices_coords[edge[1]])
        elif edge[1] == vertex_index:
            connected_points.append(vertices_coords[edge[0]])

    if len(connected_points) < 2:
        return []

    # 各点と中心点との角度を計算
    angles_points = []
    for p in connected_points:
        angle = math.atan2(p[1] - center_point[1], p[0] - center_point[0])
        angles_points.append((angle, p))
    
    # 角度でソート
    angles_points.sort()

    # ソートされた点の間（セクター）の角度を計算
    sector_angles = []
    num_points = len(angles_points)
    for i in range(num_points):
        angle1, _ = angles_points[i]
        angle2, _ = angles_points[(i + 1) % num_points]
        diff = angle2 - angle1
        # 角度が負になる場合（360度をまたぐ場合）は2πを足す
        if diff < 0:
            diff += 2 * math.pi
        sector_angles.append(diff)
        
    return sector_angles


# 頂点周りのエッジ情報を格納するためのデータ構造
HalfEdge = namedtuple('HalfEdge', [
    'vector_angle',      # 頂点から接続先へのベクトルの角度(atan2)
    'sector_angle',      # このエッジと次のエッジが成す角度(α)
    'assignment',        # "M", "V", "B" などの種類
    'edge_indices_tuple' # (中心頂点, 接続先頂点)
])

def get_ordered_half_edges(vertex_index, vertices_coords, edges_vertices, edges_assignment):
    """
    頂点に接続するハーフエッジを物理的にソートし、各セクターの角度と共に返す。
    """
    center_point = vertices_coords[vertex_index]
    
    # 頂点に接続するエッジとその接続先の情報を収集
    connected_edges = []
    for i, edge in enumerate(edges_vertices):
        if edge[0] == vertex_index:
            other_v_idx = edge[1]
            connected_edges.append({'assignment': edges_assignment[i], 'other_v': other_v_idx})
        elif edge[1] == vertex_index:
            other_v_idx = edge[0]
            connected_edges.append({'assignment': edges_assignment[i], 'other_v': other_v_idx})

    if len(connected_edges) < 2:
        return []

    # 各接続先へのベクトル角度(atan2)を計算
    sorted_edges_info = []
    for edge_info in connected_edges:
        p_coords = vertices_coords[edge_info['other_v']]
        angle = math.atan2(p_coords[1] - center_point[1], p_coords[0] - center_point[0])
        sorted_edges_info.append({
            'vector_angle': angle,
            'assignment': edge_info['assignment'],
            'other_v': edge_info['other_v']
        })
    
    # ベクトル角度で反時計回りにソート
    sorted_edges_info.sort(key=lambda x: x['vector_angle'])

    # HalfEdgeオブジェクトのリストを生成
    half_edges = []
    num_edges = len(sorted_edges_info)
    for i in range(num_edges):
        current_edge = sorted_edges_info[i]
        next_edge = sorted_edges_info[(i + 1) % num_edges]
        
        # 2つのベクトル間の角度（セクター角度）を計算
        sector_angle = next_edge['vector_angle'] - current_edge['vector_angle']
        if sector_angle < 0:
            sector_angle += 2 * math.pi
            
        half_edges.append(HalfEdge(
            vector_angle=current_edge['vector_angle'],
            sector_angle=sector_angle,
            assignment=current_edge['assignment'],
            edge_indices_tuple=(vertex_index, current_edge['other_v'])
        ))
        
    return half_edges


def check_boundary_count(assignments, vertex_index):
    """頂点に接続する境界線の数が0または2であるかを検証する"""
    b_count = assignments.count("B")
    if b_count not in [0, 2]:
        return {
            "type": "BoundaryCount",
            "vertex": vertex_index,
            "message": f"Vertex {vertex_index} has an invalid number of boundary edges. Expected 0 or 2, but found {b_count}.",
            "context": {
                "boundary_count": b_count,
                "expected_values": [0, 2]
            }
        }
    return None


def check_overlapping_creases(ordered_half_edges, vertex_index):
    """
    頂点から伸びる折り線が幾何学的に重複していないかを検証する。
    入力リストはベクトル角度でソート済みであることを前提とする。
    """
    num_edges = len(ordered_half_edges)
    if num_edges < 2:
        return None

    for i in range(num_edges):
        # 隣接するエッジを比較。リストは循環しているとみなす。
        current_he = ordered_half_edges[i]
        next_he = ordered_half_edges[(i + 1) % num_edges]

        if math.isclose(current_he.vector_angle, next_he.vector_angle, rel_tol=EPSILON, abs_tol=EPSILON):
            # 重複を検出
            return {
                "type": "OverlappingCreases",
                "vertex": vertex_index,
                "message": f"Vertex {vertex_index} has geometrically overlapping creases.",
                "context": {
                    "overlapping_angle_deg": math.degrees(current_he.vector_angle),
                    # 重複している線の先の頂点IDを取得
                    "involved_vertices": sorted([
                        current_he.edge_indices_tuple[1],
                        next_he.edge_indices_tuple[1]
                    ])
                }
            }
    return None

def check_maekawa_theorem(assignments, vertex_index):
    """前川の定理を検証する: |M - V| = 2"""
    m_count = assignments.count("M")
    v_count = assignments.count("V")
    if abs(m_count - v_count) != 2:
        return {
            "type": "Maekawa",
            "vertex": vertex_index,
            "message": f"Vertex {vertex_index} fails Maekawa's theorem. |M({m_count}) - V({v_count})| = {abs(m_count - v_count)}, but should be 2."
        }
    return None


def check_kawasaki_theorem(angles, vertex_index):
    """川崎の定理を検証する: 交互の角度の和がそれぞれ180度になる"""
    if not angles or len(angles) % 2 != 0:
        # 奇数個の角度では定理は適用できない
        return {
            "type": "Kawasaki",
            "vertex": vertex_index,
            "message": f"Vertex {vertex_index} has an odd number of angles ({len(angles)}), which is not typical for flat-foldable interior vertices."
        }

    # 角度の総和が360度(2π)であるかチェック
    if not math.isclose(sum(angles), 2 * math.pi):
        return {
            "type": "Kawasaki",
            "vertex": vertex_index,
            "message": f"Vertex {vertex_index} angles do not sum to 360 degrees. Sum is {math.degrees(sum(angles)):.2f}."
        }
    
    # 交互の角度の和を計算
    odd_sum = sum(angles[i] for i in range(0, len(angles), 2))
    even_sum = sum(angles[i] for i in range(1, len(angles), 2))

    if not math.isclose(odd_sum, even_sum):
        return {
            "type": "Kawasaki",
            "vertex": vertex_index,
            "message": (
                f"Vertex {vertex_index} fails Kawasaki's theorem. "
                f"Alternating angle sums are not equal. "
                f"Odd sum: {math.degrees(odd_sum):.2f}, Even sum: {math.degrees(even_sum):.2f}."
            )
        }
    return None


def check_big_little_big_theorem(ordered_half_edges, vertex_index):
    """
    Big-Little-Big定理から導かれる局所的な条件を検証する。
    ルール: 連続する3つのセクター角 a1, a2, a3 について、もし a1 > a2 かつ a3 > a2 ならば、
          a2 を形成する2本の折り線(e2, e3)の割り当ては異ならなければならない (M/V)。
    """
    num_edges = len(ordered_half_edges)
    if num_edges < 3:
        # 3辺未満の頂点では、この条件は適用できない
        return None

    for i in range(num_edges):
        # 連続する3つのセクター角を循環的に取得する
        # he_prev.sector_angle は a1 に相当
        # he_min.sector_angle  は a2 に相当
        # he_next.sector_angle は a3 に相当
        he_prev = ordered_half_edges[i]
        he_min  = ordered_half_edges[(i + 1) % num_edges]
        he_next = ordered_half_edges[(i + 2) % num_edges]

        angle1 = he_prev.sector_angle
        angle2 = he_min.sector_angle
        angle3 = he_next.sector_angle

        # 条件: angle1 > angle2 かつ angle3 > angle2 (angle2が局所最小角)
        # 浮動小数点数の比較のため、A > B を A - B > EPSILON でチェック
        if (angle1 - angle2 > EPSILON) and (angle3 - angle2 > EPSILON):
            # 条件を満たした場合、angle2を形成する2本の折り線の割り当てをチェックする。
            # angle2 (he_min.sector_angle) は、折り線 he_min と he_next によって形成される。
            assignment1 = he_min.assignment
            assignment2 = he_next.assignment

            # M(山折り)またはV(谷折り)でない場合はチェック対象外
            if assignment1 not in ["M", "V"] or assignment2 not in ["M", "V"]:
                continue

            # 割り当てが同じであればルール違反
            if assignment1 == assignment2:
                return {
                    "type": "BigLittleBigCondition",
                    "vertex": vertex_index,
                    "message": (
                        f"Vertex {vertex_index} fails the local minima condition (derived from Big-Little-Big). "
                        f"The two creases forming a local minimum angle must have different assignments (one mountain, one valley)."
                    ),
                    "context": {
                        "local_minimum_angle_deg": math.degrees(angle2),
                        "surrounding_angles_deg": [math.degrees(angle1), math.degrees(angle3)],
                        "conflicting_assignments": [assignment1, assignment2],
                        "involved_vertices": sorted([
                            he_min.edge_indices_tuple[1],
                            he_next.edge_indices_tuple[1]
                        ])
                    }
                }
    
    # 全ての局所最小角でルールが満たされた
    return None

def check_generalized_blb_lemma(ordered_half_edges, vertex_index):
    """
    一般化された大小大の補題（Generalized Big-Little-Big Lemma）を検証する。
    """
    # ステップ1: 適用除外条件の事前判定 (上位で実施済みと想定)
    # BORDERやUNASSIGNEDが含まれていないことを前提とする

    num_edges = len(ordered_half_edges)
    if num_edges < 3:
        return None # 3辺未満ではシーケンスが形成されない

    sector_angles = [he.sector_angle for he in ordered_half_edges]

    # ステップ3: 等角シーケンスの特定と適用可否の判定
    i = 0
    while i < num_edges:
        # 等角シーケンスを探す
        j = i
        while math.isclose(sector_angles[j], sector_angles[(j + 1) % num_edges], rel_tol=EPSILON, abs_tol=EPSILON):
            j = (j + 1) % num_edges
            if j == (i - 1 + num_edges) % num_edges: # 1周してしまった(全角が等しい)
                return None # この補題は適用されない

        if i == j: # シーケンス長が1ならスキップ
            i += 1
            continue

        # シーケンスSを特定
        # Pythonのスライスと違い、循環インデックスを扱う
        sequence_indices = []
        curr = i
        while True:
            sequence_indices.append(curr)
            if curr == j: break
            curr = (curr + 1) % num_edges
        
        # 適用前件(precondition)の確認
        alpha_s = sector_angles[i]
        alpha_prev_idx = (i - 1 + num_edges) % num_edges
        alpha_next_idx = (j + 1) % num_edges

        alpha_prev = sector_angles[alpha_prev_idx]
        alpha_next = sector_angles[alpha_next_idx]

        # 条件: α_prev > α_s AND α_next > α_s
        # 浮動小数点数なので (a > b) は (a - b >= EPSILON) で判定
        if (alpha_prev - alpha_s >= EPSILON) and (alpha_next - alpha_s >= EPSILON):
            # --- ステップ4: 補題の規則検証 ---
            
            # 1. 折り線本数の計数
            # k個の角度シーケンスは、k+1本の折り線で形成される
            edge_count = len(sequence_indices) + 1
            
            # 2. 山・谷の計数
            # 該当する k+1 本の折り線は、シーケンスの開始インデックス(i)から
            # 終了インデックス(j)の *次* まで
            mountain_count = 0
            valley_count = 0
            
            edge_sub_indices = []
            curr = i
            while True:
                edge_sub_indices.append(curr)
                if curr == alpha_next_idx: break # シーケンスを形成する最後のエッジ
                curr = (curr + 1) % num_edges

            # 実際のM/Vカウント
            for edge_idx in edge_sub_indices:
                assignment = ordered_half_edges[edge_idx].assignment
                if assignment == "M":
                    mountain_count += 1
                elif assignment == "V":
                    valley_count += 1

            # 3. 規則判定
            error = None
            if edge_count % 2 == 0: # 偶数本
                if mountain_count != valley_count:
                    error = "mountain_count == valley_count"
            else: # 奇数本
                if abs(mountain_count - valley_count) != 1:
                    error = "abs(mountain_count - valley_count) == 1"
            
            if error:
                # 違反が検出された
                return {
                    "type": "GeneralizedBigLittleBigLemma",
                    "vertex": vertex_index,
                    "message": f"Vertex {vertex_index}: " + (
                        f"An even-edge ({edge_count}) equal-angle sequence does not have the same number of mountains and valleys."
                        if edge_count % 2 == 0 else
                        f"An odd-edge ({edge_count}) equal-angle sequence does not have a mountain/valley count difference of 1."
                    ),
                    "context": {
                        "violating_sequence": [math.degrees(alpha_s)] * len(sequence_indices),
                        "edge_count": edge_count,
                        "mountain_count": mountain_count,
                        "valley_count": valley_count,
                        "expected_condition": error
                    }
                }
        
        # 次の探索開始位置へ
        if j < i: # 1周した場合
            break
        i = j + 1

    # ステップ5: 最終判定
    return None # 全てのシーケンスが規則を満たした


def validate_fold_file(file_path):
    """
    .foldファイルを読み込み、平坦折り畳み可能性のルールを検証する (修正版)
    """
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        return {"valid": False, "errors": [{"type": "File Error", "message": str(e)}]}

    required_keys = ["vertices_coords", "edges_vertices", "edges_assignment"]
    for key in required_keys:
        if key not in data:
            return {"valid": False, "errors": [{"type": "Format Error", "message": f"Missing required key: '{key}'"}]}

    vertices_coords = data["vertices_coords"]
    edges_vertices = data["edges_vertices"]
    edges_assignment = data["edges_assignment"]
    
    errors = []

    # 各頂点についてループ
    for i in range(len(vertices_coords)):
        # --- レベル0: 基本的な健全性チェック ---
        assignments = get_connected_edges_assignments(i, edges_vertices, edges_assignment)
        
        error = check_boundary_count(assignments, i)
        if error:
            errors.append(error)
            continue

        ordered_half_edges = get_ordered_half_edges(i, vertices_coords, edges_vertices, edges_assignment)
        if not ordered_half_edges:
            continue
        
        error = check_overlapping_creases(ordered_half_edges, i)
        if error:
            errors.append(error)
            continue # 健全性チェックに失敗した場合、以降の検証は無意味

        # 境界頂点(Bの数が2)の場合、内点向けの定理は適用しない
        if assignments.count("B") > 0:
            continue

        # --- レベル1: 内点向けの必要条件チェック ---
        level1_errors = []
        level1_errors.append(check_maekawa_theorem(assignments, i))
        
        sector_angles_rad = [he.sector_angle for he in ordered_half_edges]
        level1_errors.append(check_kawasaki_theorem(sector_angles_rad, i))
        level1_errors.append(check_big_little_big_theorem(ordered_half_edges, i))
        level1_errors.append(check_generalized_blb_lemma(ordered_half_edges, i))
        
        level1_errors = [e for e in level1_errors if e is not None]
        if level1_errors:
            errors.extend(level1_errors)
            continue # レベル1でエラーがあれば、レベル2は実行しない

        # --- レベル2: 内点向けの十分条件チェック (修正版を使用) ---
        error = check_folding_simulation_fixed(ordered_half_edges, i)
        if error:
            errors.append(error)

    if errors:
        return {"valid": False, "errors": errors}
    
    return {"valid": True, "errors": []}


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Usage: python validator.py <path_to_fold_file>")
        sys.exit(1)
        
    file_path = sys.argv[1]
    result = validate_fold_file(file_path)
    print(json.dumps(result, indent=2))
